//import { AssertionError } from "assert";

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
contract('Verifier', accounts =>{ 
    const account_one = accounts[0];
    const account_two = accounts[1];

    describe('test Verifier', function(){
        beforeEach(async function() {
            this.contract = await Verifier.new({
                from: account_one
            });
        })

        it('correct proof', async function(){
            let correctProof = {
                'A': ['0x26357ccd1c3f9ecb4e80f396e685195a2e041a7ba5f65302d411c39220bca251', '0x1887d364fa3c29a030876cb5682718334301bd38377c6ed3fc3448f80045b15f'],
                'B': [['0x0775a2b4a1747e013c3039d68e0b753409b24eb8c2c8888090a353d93841223a', '0x14409ef4805c40c5594e70d7a796336aef25d4ee5b9f95332276f49b65c76617'], ['0x0a76b21d33e851a8e5305b58ac9de7cc6e8d306a4c97419cefea3633220477e2', '0x06de0c61f33bbd877fa5eb8e175a26ad0ef9665e7ea96ecd573fdf19911acfad']],
                'C': ['0x2a5c6ed912aa04c9fb07ff0d6e3f22f850bb39c1ec9dde613ba24efb2ec2bd30','0x090c36ee572f23770b9fd2a0d6ef58a041c2464856d22f47b2472ea1246aa937'],
                'input': ["0x0000000000000000000000000000000000000000000000000000000000000004","0x0000000000000000000000000000000000000000000000000000000000000000"]
            }

            let result = await this.contract.verifyTx.call(correctProof.A, correctProof.B, 
                correctProof.C, correctProof.input);
                assert.equal(result, true, 'Correct proof is not working');

        })

        it('incorrect proof', async function(){
            //Might be a problem here 
            let incorrectProof = {
                'A': ['0x26357ccd1c3f9ecb4e80f396e685195a2e041a7ba5f65302d411c39220bca251', '0x1887d364fa3c29a030876cb5682718334301bd38377c6ed3fc3448f80045b15f'],
                'B': [['0x0775a2b4a1747e013c3039d68e0b753409b24eb8c2c8888090a353d93841223a', '0x14409ef4805c40c5594e70d7a796336aef25d4ee5b9f95332276f49b65c76617'], ['0x0a76b21d33e851a8e5305b58ac9de7cc6e8d306a4c97419cefea3633220477e2', '0x06de0c61f33bbd877fa5eb8e175a26ad0ef9665e7ea96ecd573fdf19911acfad']],
                'C': ['0x2a5c6ed912aa04c9fb07ff0d6e3f22f850bb39c1ec9dde613ba24efb2ec2bd30','0x090c36ee572f23770b9fd2a0d6ef58a041c2464856d22f47b2472ea1246aa937'],
                'input': ["0x0000000000000000000000000000000000000000000000000000000000000004","0x0000000000000000000000000000000000000000000000000000000000000000"]
            }

            let result = await this.contract.verifyTx.call(incorrectProof.A, incorrectProof.B, 
                incorrectProof.C, incorrectProof.input);
                assert.equal(result, false, 'Correct proof is not working');
        })
    })

})
    
// Test verification with incorrect proof
