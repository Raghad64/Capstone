//import { AssertionError } from "assert";

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
contract('Verifier', accounts =>{ 
    const account_one = accounts[0];
    const account_two = accounts[1];

    describe('test Verifier', function(){
        beforeEach(async function() {
            this.contract = await Verifier.new({from: account_one});
        })

        it('correct proof', async function(){
            let correctProof = {
                "A": ["0x1901c4b65d4828de1138f5d0234faf9e707596479fa8c296b35eec97b8054434", "0x296671a8440e58a88ad94c745ca52a4c58c5296205e8b19e2f0e4471f2795b83"],
            "B": [["0x1d23221d012056a347580388baf179f34ca9a658d27c2ae676ad5dd7f591da2b", "0x0bb389eeb0b174517952d4906f2a68ccc6573bd68239de140440a6208f017b42"], ["0x0b3abf57e71c143921c14533dfc607167816db7be7787207c0a43002046bf1a2", "0x1cd9024589b7c97d835340be6222a300d94c7829c5c6061a6736ab507fd13208"]],
            "C": ["0x2216aed2f36fbfebf6f507a27c34acbca682b92cf172fdce6878e27c2d3f426a", "0x08d7bc8100e2f0ce42987bab86308423e95d692a986b83246caeb1824ea9aa79"],
                'input': ["0x0000000000000000000000000000000000000000000000000000000000000064", "0x0000000000000000000000000000000000000000000000000000000000000001"]
            }

            let result = await this.contract.verifyTx.call(correctProof.A, correctProof.B, 
                correctProof.C, correctProof.input);
                assert.equal(result, true, 'Correct proof is not working');

        })

        it('incorrect proof', async function(){
            //Might be a problem here 
            let incorrectProof = {
                "A": ["0x1901c4b65d4828de1138f5d0234faf9e707596479fa8c296b35eec97b8054434", "0x296671a8440e58a88ad94c745ca52a4c58c5296205e8b19e2f0e4471f2795b83"],
            "B": [["0x1d23221d012056a347580388baf179f34ca9a658d27c2ae676ad5dd7f591da2b", "0x0bb389eeb0b174517952d4906f2a68ccc6573bd68239de140440a6208f017b42"], ["0x0b3abf57e71c143921c14533dfc607167816db7be7787207c0a43002046bf1a2", "0x1cd9024589b7c97d835340be6222a300d94c7829c5c6061a6736ab507fd13208"]],
            "C": ["0x2216aed2f36fbfebf6f507a27c34acbca682b92cf172fdce6878e27c2d3f426a", "0x08d7bc8100e2f0ce42987bab86308423e95d692a986b83246caeb1824ea9aa79"],
                'input': ["0x0000000000000000000000000000000000000000000000000000000000000064", "0x0000000000000000000000000000000000000000000000000000000000000001"]
            }

            let result = await this.contract.verifyTx.call(incorrectProof.A, incorrectProof.B, 
                incorrectProof.C, incorrectProof.input);
                assert.equal(result, false, 'Correct proof is not working');
        })
    })

})
    
// Test verification with incorrect proof
